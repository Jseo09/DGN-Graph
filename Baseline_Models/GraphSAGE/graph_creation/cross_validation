import os
import json
from sklearn.model_selection import KFold
import random

def preprocess_graph(graph_lst):
    num_nodes = 0
    max_graph = {}
    for g in graph_lst["graphs"]:
        if len(g["nodes"]) > num_nodes:
            num_nodes = len(g["nodes"])
            max_graph = g

    for idx, node in enumerate(max_graph["nodes"]):
        node["id"] = idx
    
    #This picks the largest graph 
    return max_graph
# This picks the graph 'regardless' of the size. 
def picking_random_graph(graph_lst):
    random_graph = random.choice(graph_lst["graphs"])
    return random_graph 


if __name__ == "__main__":
    # Change the file path according to pygraphs file you are trying to make folds of 
    json_file = "/home/jseo/DGN-Graph-1/Baseline_Models/GraphSAGE/graph_creation/processed_data/pygraphs.json"
    graph_lst = json.load(open(json_file))

    # Set the values over here(parameter here)/ It shuffles(for it to pick random graphs )
    kf = KFold(n_splits=10, shuffle=True, random_state=123)

    #Initiate folds here
    fold_index = 0

    #For to create the lists of training and validation graphs for the current folds 
    for train_index, val_index in kf.split(graph_lst["graphs"]):
        train_graphs = [graph_lst["graphs"][i] for i in train_index]
        val_graphs = [graph_lst["graphs"][i] for i in val_index]

        # For debugging and checking the range of the folds. 
        print(f"Fold {fold_index}:")
        print(f"Number of training graphs: {len(train_graphs)}")
        print(f"Number of validation graphs: {len(val_graphs)}")

        # Preprocess each fold for training for findining the largest graph. 
        train_max_graph = picking_random_graph({"graphs": train_graphs})
        val_max_graph = picking_random_graph({"graphs": val_graphs})

        # Save the preprocessed graphs into JSON files
        train_output_dir = f"fold{fold_index}"
        val_output_dir = f"fold{fold_index}"

        os.makedirs(train_output_dir, exist_ok=True)
        os.makedirs(val_output_dir, exist_ok=True)

        #Start generating the files for the training: such as -G, -id_map and class_map 
        with open(os.path.join(train_output_dir, "pygraphs-G.json"), "w") as f:
            json.dump(train_max_graph, f)

        with open(os.path.join(train_output_dir, "pygraphs-id_map.json"), "w") as f:
            # Generate id_map and class_map for training
            id_map_train = {}
            class_map_train = {}
            index = 0
            #For the nodes in train_max_graph(the largest graph)
            for node in train_max_graph["nodes"]:
                #Map the nodes ID to label 
                id_map_train[node["id"]] = index
                class_map_train[node["id"]] = node["label"]
                index += 1
            json.dump(id_map_train, f)

        #Save the files over here   
        with open(os.path.join(train_output_dir, "pygraphs-class_map.json"), "w") as f:
            json.dump(class_map_train, f)

        with open(os.path.join(val_output_dir, "pygraphs-G.json"), "w") as f:
            json.dump(val_max_graph, f)

        with open(os.path.join(val_output_dir, "pygraphs-id_map.json"), "w") as f:
            # Generate id_map and class_map for validation
            id_map_val = {}
            class_map_val = {}
            index = 0
            for node in val_max_graph["nodes"]:
                id_map_val[node["id"]] = index
                class_map_val[node["id"]] = node["label"]
                index += 1
            json.dump(id_map_val, f)

        with open(os.path.join(val_output_dir, "pygraphs-class_map.json"), "w") as f:
            json.dump(class_map_val, f)

        print(f"Fold {fold_index} completed.")

        fold_index += 1
